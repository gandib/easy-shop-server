// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
id String @id @default(uuid())
name String
email String @unique
role UserRole @default(USER)
password String
status UserStatus @default(ACTIVE)
shop Shop?
rating Rating[]
review Review[]
follow Follow[]

createdAt     DateTime @default(now())
updatedAt     DateTime @updatedAt

@@map("users")
}

model Shop {
id String @id @default(uuid())
vendorId String @unique
vendor User @relation(fields: [vendorId], references: [id], onDelete: Cascade)
name String
logo String
description String
isBlackListed Boolean @default(false)
product Product[]
shopResponse ShopResponse[]
coupon Coupon[]
flashSale FlashSale[]
follow Follow[]

createdAt     DateTime @default(now())
updatedAt     DateTime @updatedAt

@@map("Shops")
}

model Category {
id String @id @default(uuid())
name String
isDeleted Boolean @default(false)
product Product[]

createdAt     DateTime @default(now())
updatedAt     DateTime @updatedAt

@@map("categories")
}

model Product {
id String @id @default(uuid())
shopId String
shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
name String
price Float
categoryId String
category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
description String
img String
quantity Int
discount Float?
isDeleted Boolean @default(false)
orderItem OrderItem[]
rating Rating[]
review Review[]

createdAt     DateTime @default(now())
updatedAt     DateTime @updatedAt

@@map("products")
}



model Order {
id String @id @default(uuid())
userId String
status OrderStatus @default(PENDING)
totalPrice Float
paymentStatus PaymentStatus @default(UNPAID)
orderItem OrderItem[]
payment Payment?

createdAt     DateTime @default(now())
updatedAt     DateTime @updatedAt

@@map("orders")
}

model OrderItem {
id String @id @default(uuid())
productId String
product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
orderId String
order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
quantity Int

createdAt     DateTime @default(now())
updatedAt     DateTime @updatedAt

@@map("order-items")
}

model Rating {
id String @id @default(uuid())
userId String
user User @relation(fields: [userId], references: [id], onDelete: Cascade)
productId String
product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
rating Int

createdAt     DateTime @default(now())
updatedAt     DateTime @updatedAt

@@map("ratings")
}

model Review {
id String @id @default(uuid())
comment String
productId String
product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
userId String
user User @relation(fields: [userId], references: [id], onDelete: Cascade)
shopResponse ShopResponse?

createdAt     DateTime @default(now())
updatedAt     DateTime @updatedAt

@@map("reviews")
}

model ShopResponse {
id String @id @default(uuid())
reviewId String @unique
review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
shopId String @unique
shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
response String

createdAt     DateTime @default(now())
updatedAt     DateTime @updatedAt

@@map("shop-responses")
}

model Payment {
id String @id @default(uuid())
orderId String @unique
order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
amount Float
transactionId String
gatewayData Json?

createdAt     DateTime @default(now())
updatedAt     DateTime @updatedAt

@@map("payments")
}

model Coupon {
id String @id @default(uuid())
shopId String 
shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
code String
percentage Float
expiryDate DateTime

createdAt     DateTime @default(now())
updatedAt     DateTime @updatedAt

@@map("coupons")
}

model FlashSale {
id String @id @default(uuid())
shopId String 
shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)

createdAt     DateTime @default(now())
updatedAt     DateTime @updatedAt

@@map("flash-sales")
}

model Follow {
userId String
user User @relation(fields: [userId], references: [id], onDelete: Cascade)
shopId String 
shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)

@@id([userId, shopId])
@@map("follows")
}

enum UserRole {
  ADMIN
  VENDOR
  USER
}
enum UserStatus {
  ACTIVE
  SUSPENDED
  DELETED
}
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
enum PaymentStatus {
  UNPAID
  PAID
}

